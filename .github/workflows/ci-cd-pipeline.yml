# Name of your workflow
name: Java Spring Boot CI/CD Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job builds the application, creates a Docker image, and pushes it to GHCR
  build-and-push-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Permissions are needed to push to the GitHub Container Registry (GHCR)
    permissions:
      contents: read
      packages: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Build the application with Maven
      # This step creates the executable JAR file
      - name: Build with Maven
        run: mvn clean package -B -DskipTests

      # 4. Log in to GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # GITHUB_TOKEN is a special secret automatically created by GitHub Actions
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5. Extract metadata (tags, labels) for Docker
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # ghcr.io/your-username/your-repo

      # 6. Build and push the Docker image to GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
  # This job deploys the Docker image to the EC2 instance
  deploy-to-ec2:
    # This job will only run after 'build-and-push-image' has successfully completed
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      # 1. Configure AWS credentials
      # This step uses the secrets we stored in GitHub to authenticate with AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 2. Deploy to EC2 using AWS SSM Send-Command
      # This is a secure way to run commands on your EC2 instance without opening SSH ports
      - name: Deploy to EC2
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying new Docker image" \
            --parameters 'commands=
              [
                "#!/bin/bash",
                "cd /home/ec2-user",
                "echo DOCKER_IMAGE=ghcr.io/${{ github.repository }}:latest >> .env",
                "echo DOCKER_LOGIN_USER=${{ github.actor }} >> .env",
                "echo DOCKER_LOGIN_PASSWORD=${{ secrets.GITHUB_TOKEN }} >> .env",
                "docker-compose down",
                "docker-compose pull",
                "docker-compose up -d"
              ]'
